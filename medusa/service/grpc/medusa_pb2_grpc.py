# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from medusa.service.grpc import medusa_pb2 as medusa_dot_service_dot_grpc_dot_medusa__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in medusa/service/grpc/medusa_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MedusaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Backup = channel.unary_unary(
                '/Medusa/Backup',
                request_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupRequest.SerializeToString,
                response_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupResponse.FromString,
                _registered_method=True)
        self.AsyncBackup = channel.unary_unary(
                '/Medusa/AsyncBackup',
                request_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupRequest.SerializeToString,
                response_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupResponse.FromString,
                _registered_method=True)
        self.BackupStatus = channel.unary_unary(
                '/Medusa/BackupStatus',
                request_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupStatusRequest.SerializeToString,
                response_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupStatusResponse.FromString,
                _registered_method=True)
        self.DeleteBackup = channel.unary_unary(
                '/Medusa/DeleteBackup',
                request_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.DeleteBackupRequest.SerializeToString,
                response_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.DeleteBackupResponse.FromString,
                _registered_method=True)
        self.GetBackup = channel.unary_unary(
                '/Medusa/GetBackup',
                request_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupRequest.SerializeToString,
                response_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupResponse.FromString,
                _registered_method=True)
        self.GetBackups = channel.unary_unary(
                '/Medusa/GetBackups',
                request_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupsRequest.SerializeToString,
                response_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupsResponse.FromString,
                _registered_method=True)
        self.PurgeBackups = channel.unary_unary(
                '/Medusa/PurgeBackups',
                request_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.PurgeBackupsRequest.SerializeToString,
                response_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.PurgeBackupsResponse.FromString,
                _registered_method=True)
        self.PrepareRestore = channel.unary_unary(
                '/Medusa/PrepareRestore',
                request_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.PrepareRestoreRequest.SerializeToString,
                response_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.PrepareRestoreResponse.FromString,
                _registered_method=True)


class MedusaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Backup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AsyncBackup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackupStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBackup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBackup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBackups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PurgeBackups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PrepareRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MedusaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Backup': grpc.unary_unary_rpc_method_handler(
                    servicer.Backup,
                    request_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupRequest.FromString,
                    response_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupResponse.SerializeToString,
            ),
            'AsyncBackup': grpc.unary_unary_rpc_method_handler(
                    servicer.AsyncBackup,
                    request_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupRequest.FromString,
                    response_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupResponse.SerializeToString,
            ),
            'BackupStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.BackupStatus,
                    request_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupStatusRequest.FromString,
                    response_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupStatusResponse.SerializeToString,
            ),
            'DeleteBackup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBackup,
                    request_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.DeleteBackupRequest.FromString,
                    response_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.DeleteBackupResponse.SerializeToString,
            ),
            'GetBackup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBackup,
                    request_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupRequest.FromString,
                    response_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupResponse.SerializeToString,
            ),
            'GetBackups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBackups,
                    request_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupsRequest.FromString,
                    response_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupsResponse.SerializeToString,
            ),
            'PurgeBackups': grpc.unary_unary_rpc_method_handler(
                    servicer.PurgeBackups,
                    request_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.PurgeBackupsRequest.FromString,
                    response_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.PurgeBackupsResponse.SerializeToString,
            ),
            'PrepareRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.PrepareRestore,
                    request_deserializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.PrepareRestoreRequest.FromString,
                    response_serializer=medusa_dot_service_dot_grpc_dot_medusa__pb2.PrepareRestoreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Medusa', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Medusa', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Medusa(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Backup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Medusa/Backup',
            medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupRequest.SerializeToString,
            medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AsyncBackup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Medusa/AsyncBackup',
            medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupRequest.SerializeToString,
            medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BackupStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Medusa/BackupStatus',
            medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupStatusRequest.SerializeToString,
            medusa_dot_service_dot_grpc_dot_medusa__pb2.BackupStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteBackup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Medusa/DeleteBackup',
            medusa_dot_service_dot_grpc_dot_medusa__pb2.DeleteBackupRequest.SerializeToString,
            medusa_dot_service_dot_grpc_dot_medusa__pb2.DeleteBackupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBackup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Medusa/GetBackup',
            medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupRequest.SerializeToString,
            medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBackups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Medusa/GetBackups',
            medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupsRequest.SerializeToString,
            medusa_dot_service_dot_grpc_dot_medusa__pb2.GetBackupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PurgeBackups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Medusa/PurgeBackups',
            medusa_dot_service_dot_grpc_dot_medusa__pb2.PurgeBackupsRequest.SerializeToString,
            medusa_dot_service_dot_grpc_dot_medusa__pb2.PurgeBackupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PrepareRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Medusa/PrepareRestore',
            medusa_dot_service_dot_grpc_dot_medusa__pb2.PrepareRestoreRequest.SerializeToString,
            medusa_dot_service_dot_grpc_dot_medusa__pb2.PrepareRestoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
